import telebot
from telebot.types import (Message, ReplyKeyboardMarkup, 
                          ReplyKeyboardRemove, InlineKeyboardMarkup, 
                          InlineKeyboardButton)
import requests
from datetime import datetime
import base64
import re
from io import BytesIO
from PIL import Image
import yaml
from dotenv import load_dotenv
import os

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
AUTHORIZED_USER_ID = int(os.getenv("AUTHORIZED_USER_ID"))
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN")
REPO_OWNER = os.getenv("REPO_OWNER", "PrivateSeo")
REPO_NAME = os.getenv("REPO_NAME", "privateseo.github.io")
BRANCH = os.getenv("BRANCH", "main")
NEWS_DIR = "_posts/news"
IMAGES_DIR = "assets/images/news"
MENU_PATH = "_data/menu.yml"

# --- –ö–ê–¢–ï–ì–û–†–ò–ò ---
CATEGORIES = {
    "frontend": "üë®‚Äçüíª Frontend",
    "backend": "‚öôÔ∏è Backend",
    "seo": "üîç SEO",
    "tools": "üõ†Ô∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã",
    "cases": "üìä –ö–µ–π—Å—ã"
}

# –¢–∞–±–ª–∏—Ü–∞ —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–∏
TRANSLIT_TABLE = {
    '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'yo',
    '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm',
    '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
    '—Ñ': 'f', '—Ö': 'h', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'sch',
    '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya'
}

bot = telebot.TeleBot(BOT_TOKEN)
user_states = {}

# --- –û–ë–©–ò–ï –§–£–ù–ö–¶–ò–ò ---
def is_authorized(user_id):
    return user_id == AUTHORIZED_USER_ID

def get_menu_data():
    response = requests.get(
        f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}/contents/{MENU_PATH}",
        headers={"Authorization": f"token {GITHUB_TOKEN}"}
    )
    if response.status_code == 200:
        content = base64.b64decode(response.json()['content']).decode('utf-8')
        return yaml.safe_load(content)
    return {"items": []}

def update_menu_data(data):
    content = yaml.dump(data, allow_unicode=True, sort_keys=False)
    sha = get_menu_sha()
    if not sha:
        return False
    
    response = requests.put(
        f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}/contents/{MENU_PATH}",
        headers={
            "Authorization": f"token {GITHUB_TOKEN}",
            "Accept": "application/vnd.github.v3+json"
        },
        json={
            "message": "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞",
            "content": base64.b64encode(content.encode('utf-8')).decode('utf-8'),
            "branch": BRANCH,
            "sha": sha
        }
    )
    return response.status_code == 200

def get_menu_sha():
    response = requests.get(
        f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}/contents/{MENU_PATH}",
        headers={"Authorization": f"token {GITHUB_TOKEN}"}
    )
    return response.json().get('sha') if response.status_code == 200 else None

def menu_keyboard():
    markup = InlineKeyboardMarkup()
    markup.row(
        InlineKeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é", callback_data="show_menu"),
        InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—É–Ω–∫—Ç", callback_data="add_item")
    )
    markup.row(
        InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—É–Ω–∫—Ç", callback_data="edit_item"),
        InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –ø—É–Ω–∫—Ç", callback_data="delete_item")
    )
    return markup

def category_keyboard():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for cat in CATEGORIES.values():
        markup.add(cat)
    return markup

def transliterate(text):
    text = text.lower()
    result = []
    for char in text:
        if char in TRANSLIT_TABLE:
            result.append(TRANSLIT_TABLE[char])
        elif re.match(r'[a-z0-9-]', char):
            result.append(char)
        else:
            result.append('-')
    return ''.join(result)

def optimize_image(image_bytes, quality=80):
    try:
        img = Image.open(BytesIO(image_bytes))
        if img.mode in ('RGBA', 'P'):
            img = img.convert('RGB')
        output = BytesIO()
        img.save(output, format='WEBP', quality=quality, method=6)
        optimized_bytes = output.getvalue()
        output.close()
        return optimized_bytes
    except Exception as e:
        raise Exception(f"–û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")

def get_file_sha(path):
    try:
        response = requests.get(
            f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}/contents/{path}",
            headers={"Authorization": f"token {GITHUB_TOKEN}"}
        )
        if response.status_code == 200:
            return response.json().get('sha')
        return None
    except Exception:
        return None

def upload_to_github(path, content, message, is_binary=False):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π SHA —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        sha = get_file_sha(path)
        
        if is_binary:
            content_base64 = base64.b64encode(content).decode('utf-8')
        else:
            content_base64 = base64.b64encode(content.encode('utf-8')).decode('utf-8')
        
        data = {
            "message": message,
            "branch": BRANCH,
            "content": content_base64
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º SHA, –µ—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if sha:
            data["sha"] = sha
        
        response = requests.put(
            f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}/contents/{path}",
            headers={
                "Authorization": f"token {GITHUB_TOKEN}",
                "Accept": "application/vnd.github.v3+json"
            },
            json=data
        )
        
        if response.status_code not in (200, 201):
            error_data = response.json()
            error_msg = error_data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
            if 'documentation_url' in error_data:
                error_msg += f"\n–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: {error_data['documentation_url']}"
            
            raise Exception(f"GitHub API: {error_msg}")
        
        return response.json()
    except Exception as e:
        raise Exception(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ GitHub: {str(e)}")

def create_news_file_content(user_data, content, image_url=None):
    date = datetime.now().strftime('%Y-%m-%d')
    image_path = f"/{image_url}" if image_url else ""
    
    return f"""---
layout: news
name: "{user_data['name']}"
title: "{user_data['title']}"
description: "{user_data['description']}"
date: {date}
image: "{image_path}"
category: {user_data['category']}
---

{content}
"""

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ---
@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    if is_authorized(message.from_user.id):
        bot.send_message(
            message.chat.id,
            "üåê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∞–π—Ç–æ–º\n\n"
            "/news - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å\n"
            "/menu - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é\n"
            "/help - –°–ø—Ä–∞–≤–∫–∞"
        )
    else:
        bot.reply_to(message, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")

@bot.message_handler(commands=['menu'])
def manage_menu(message):
    if not is_authorized(message.from_user.id):
        return
    bot.send_message(message.chat.id, "üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é —Å–∞–π—Ç–∞:", reply_markup=menu_keyboard())

@bot.message_handler(commands=['news', 'add'])
def start_news_creation(message):
    if not is_authorized(message.from_user.id):
        return
    
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=category_keyboard())
    user_states[message.chat.id] = {'step': 'waiting_for_category'}

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–û–ë–©–ï–ù–ò–ô ---
@bot.message_handler(func=lambda m: user_states.get(m.chat.id, {}).get('step') == 'waiting_for_category' and m.text in CATEGORIES.values())
def process_category(message):
    category = next(k for k, v in CATEGORIES.items() if v == message.text)
    user_states[message.chat.id] = {
        'step': 'waiting_for_name',
        'category': category,
        'media': None
    }
    bot.send_message(message.chat.id, "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ (–¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Å–∞–π—Ç–µ):", reply_markup=ReplyKeyboardRemove())

@bot.message_handler(func=lambda m: user_states.get(m.chat.id, {}).get('step') == 'waiting_for_name')
def process_name(message):
    user_states[message.chat.id]['name'] = message.text
    user_states[message.chat.id]['step'] = 'waiting_for_title'
    bot.send_message(message.chat.id, "üè∑ –í–≤–µ–¥–∏—Ç–µ title (–¥–ª—è SEO –∑–∞–≥–æ–ª–æ–≤–∫–∞):")

@bot.message_handler(func=lambda m: user_states.get(m.chat.id, {}).get('step') == 'waiting_for_title')
def process_title(message):
    user_states[message.chat.id]['title'] = message.text
    user_states[message.chat.id]['step'] = 'waiting_for_description'
    bot.send_message(message.chat.id, "üìÑ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏:")

@bot.message_handler(func=lambda m: user_states.get(m.chat.id, {}).get('step') == 'waiting_for_description')
def process_description(message):
    user_states[message.chat.id]['description'] = message.text
    user_states[message.chat.id]['step'] = 'waiting_for_media'
    bot.send_message(message.chat.id, "üñº –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏ (–∏–ª–∏ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")

@bot.message_handler(commands=['skip'], func=lambda m: user_states.get(m.chat.id, {}).get('step') == 'waiting_for_media')
def skip_media(message):
    user_states[message.chat.id]['step'] = 'waiting_for_content'
    bot.send_message(message.chat.id, "üí¨ –í–≤–µ–¥–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ (HTML/Markdown):")

@bot.message_handler(content_types=['photo'], func=lambda m: user_states.get(m.chat.id, {}).get('step') == 'waiting_for_media')
def process_media(message):
    try:
        file_info = bot.get_file(message.photo[-1].file_id)
        original_image = bot.download_file(file_info.file_path)
        
        bot.send_chat_action(message.chat.id, 'upload_photo')
        optimized_image = optimize_image(original_image)
        
        user_states[message.chat.id]['media'] = optimized_image
        user_states[message.chat.id]['step'] = 'waiting_for_content'
        bot.send_message(message.chat.id, "‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∏ –≥–æ—Ç–æ–≤–æ –∫ –∑–∞–≥—Ä—É–∑–∫–µ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç:")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")

@bot.message_handler(func=lambda m: user_states.get(m.chat.id, {}).get('step') == 'waiting_for_content')
def process_content(message):
    try:
        user_data = user_states[message.chat.id]
        category = user_data['category']
        
        image_url = ""
        if user_data.get('media'):
            image_name = f"{datetime.now().strftime('%Y%m%d_%H%M%S')}.webp"
            image_path = f"{IMAGES_DIR}/{image_name}"
            
            try:
                upload_result = upload_to_github(
                    path=image_path,
                    content=user_data['media'],
                    message="–î–æ–±–∞–≤–ª–µ–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ (WebP)",
                    is_binary=True
                )
                
                if not upload_result:
                    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                
                image_url = image_path
            except Exception as e:
                bot.send_message(message.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                image_url = ""

        transliterated_name = transliterate(user_data['name'])
        filename = f"{datetime.now().strftime('%Y-%m-%d')}-{transliterated_name}.md"
        content = create_news_file_content(user_data, message.text, image_url)

        try:
            upload_result = upload_to_github(
                path=f"{NEWS_DIR}/{filename}",
                content=content,
                message=f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–æ—Å—Ç—å: {user_data['name']}",
                is_binary=False
            )
            
            if upload_result:
                bot.send_message(
                    message.chat.id,
                    f"""‚úÖ –ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!
                    
üìå –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {CATEGORIES[category]}
üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {user_data['name']}
üîó –°—Å—ã–ª–∫–∞: {upload_result["content"]["html_url"]}
üåê URL –Ω–∞ —Å–∞–π—Ç–µ: /news/{transliterated_name}/
üñº –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {'–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ (WebP)' if image_url else '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}"""
                )
            else:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–æ–≤–æ—Å—Ç—å")
        
        except Exception as e:
            bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏: {str(e)}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å –µ—â–µ —Ä–∞–∑.")
    
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
    finally:
        if message.chat.id in user_states:
            del user_states[message.chat.id]

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò INLINE –ö–ù–û–ü–û–ö ---
@bot.callback_query_handler(func=lambda call: call.data == "show_menu")
def show_menu(call):
    try:
        menu = get_menu_data()
        text = "üìã –¢–µ–∫—É—â–µ–µ –º–µ–Ω—é:\n\n"
        for i, item in enumerate(menu['items'], 1):
            text += f"{i}. {item['title']} ‚Üí {item['url']}\n"
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=menu_keyboard())
    except Exception as e:
        bot.send_message(call.message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ–Ω—é: {str(e)}")

@bot.callback_query_handler(func=lambda call: call.data == "add_item")
def add_item_start(call):
    user_states[call.message.chat.id] = {"action": "add_item", "step": "title"}
    bot.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é:",
        call.message.chat.id,
        call.message.message_id
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith("edit_item"))
def edit_item_start(call):
    try:
        menu = get_menu_data()
        markup = InlineKeyboardMarkup()
        for i, item in enumerate(menu['items']):
            markup.add(InlineKeyboardButton(f"{i+1}. {item['title']}", callback_data=f"edit_select_{i}"))
        markup.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu"))
        bot.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup
        )
    except Exception as e:
        bot.send_message(call.message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–µ–Ω—é: {str(e)}")

@bot.callback_query_handler(func=lambda call: call.data.startswith("delete_item"))
def delete_item_start(call):
    try:
        menu = get_menu_data()
        markup = InlineKeyboardMarkup()
        for i, item in enumerate(menu['items']):
            markup.add(InlineKeyboardButton(f"{i+1}. {item['title']}", callback_data=f"delete_confirm_{i}"))
        markup.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu"))
        bot.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup
        )
    except Exception as e:
        bot.send_message(call.message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—É–Ω–∫—Ç–∞: {str(e)}")

@bot.callback_query_handler(func=lambda call: call.data.startswith("edit_select_"))
def edit_item_select(call):
    try:
        index = int(call.data.split("_")[2])
        user_states[call.message.chat.id] = {
            "action": "edit_item",
            "index": index,
            "step": "title"
        }
        bot.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—É–Ω–∫—Ç–∞ (–∏–ª–∏ /skip —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ):",
            call.message.chat.id,
            call.message.message_id
        )
    except Exception as e:
        bot.send_message(call.message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø—É–Ω–∫—Ç–∞: {str(e)}")

@bot.callback_query_handler(func=lambda call: call.data.startswith("delete_confirm_"))
def delete_item_confirm(call):
    try:
        index = int(call.data.split("_")[2])
        menu = get_menu_data()
        item = menu['items'][index]
        
        markup = InlineKeyboardMarkup()
        markup.row(
            InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"delete_execute_{index}"),
            InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="back_to_menu")
        )
        
        bot.edit_message_text(
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—É–Ω–∫—Ç:\n\n{item['title']} ‚Üí {item['url']}",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup
        )
    except Exception as e:
        bot.send_message(call.message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è: {str(e)}")

@bot.callback_query_handler(func=lambda call: call.data.startswith("delete_execute_"))
def delete_item_execute(call):
    try:
        index = int(call.data.split("_")[2])
        menu = get_menu_data()
        deleted_item = menu['items'].pop(index)
        
        if update_menu_data(menu):
            bot.edit_message_text(
                f"‚úÖ –ü—É–Ω–∫—Ç —É–¥–∞–ª–µ–Ω:\n{deleted_item['title']} ‚Üí {deleted_item['url']}",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=menu_keyboard()
            )
        else:
            bot.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—É–Ω–∫—Ç–∞",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=menu_keyboard()
            )
    except Exception as e:
        bot.send_message(call.message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {str(e)}")

@bot.callback_query_handler(func=lambda call: call.data == "back_to_menu")
def back_to_menu(call):
    bot.edit_message_text(
        "üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é —Å–∞–π—Ç–∞:",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=menu_keyboard()
    )

@bot.message_handler(func=lambda m: user_states.get(m.chat.id, {}).get('action') in ('add_item', 'edit_item') and 
                                  user_states[m.chat.id]['step'] == 'title')
def process_menu_item_title(message):
    try:
        user_data = user_states[message.chat.id]
        if message.text != '/skip':
            user_data['title'] = message.text
        user_data['step'] = 'url'
        bot.send_message(message.chat.id, "üåê –í–≤–µ–¥–∏—Ç–µ URL –¥–ª—è –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é:")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∑–≤–∞–Ω–∏—è: {str(e)}")

@bot.message_handler(func=lambda m: user_states.get(m.chat.id, {}).get('action') in ('add_item', 'edit_item') and 
                                  user_states[m.chat.id]['step'] == 'url')
def process_menu_item_url(message):
    try:
        user_data = user_states[message.chat.id]
        menu = get_menu_data()
        
        if user_data['action'] == 'add_item':
            menu['items'].append({
                'title': user_data['title'],
                'url': message.text
            })
            success_msg = "‚úÖ –ü—É–Ω–∫—Ç –º–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω!"
        else:
            index = user_data['index']
            if 'title' in user_data:
                menu['items'][index]['title'] = user_data['title']
            menu['items'][index]['url'] = message.text
            success_msg = "‚úÖ –ü—É–Ω–∫—Ç –º–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω!"
        
        if update_menu_data(menu):
            bot.send_message(message.chat.id, success_msg, reply_markup=menu_keyboard())
        else:
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–µ–Ω—é")
        
        del user_states[message.chat.id]
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ URL: {str(e)}")

# --- –ó–ê–ü–£–°–ö –ë–û–¢–ê ---
if __name__ == "__main__":
    print("üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    bot.infinity_polling()